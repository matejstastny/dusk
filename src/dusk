#!/usr/bin/env bash

set -euo pipefail

# --------------------------------------------------------------------------------------------
# dusk - a diskutil list wrapper with pretty output
# --------------------------------------------------------------------------------------------
# Author: Matej Stastny
# Date: 2025-02-09
# License: MIT license
# --------------------------------------------------------------------------------------------

PURPLE="\033[0;35m"
RED="\033[31m"
BLUE="\033[34m"
GREEN="\033[32m"
WHITE="\033[37m"
BOLD="\033[1m"
RESET="\033[0m"

# Dependencies ------------------------------------------------------------------------------

if [[ "$(uname)" != "Darwin" ]]; then
    echo -e "${RED}Error: This script works only on macOS!${RESET}" >&2
    exit 1
fi

if ! command -v diskutil >/dev/null 2>&1; then
    echo -e "${RED}Error: diskutil command not found. This script requires diskutil.${RESET}" >&2
    exit 1
fi

# Helpers ------------------------------------------------------------------------------------

print_line() {
    local left=$1 mid=$2 right=$3
    printf "${BLUE}%s" "$left"
    for col in {0..4}; do
        printf '─%.0s' $(seq 1 $((widths[$col] + 2)))
        if [[ $col -lt 4 ]]; then
            printf "%s" "$mid"
        fi
    done
    printf "%s${RESET}\n" "$right"
}

print_row() {
    local arrname=$1
    eval "arr=(\"\${$arrname[@]}\")"
    printf "${BLUE}│${RESET}"
    for col in {0..4}; do
        local field="${arr[$col]}"
        field="$(echo "$field" | sed 's/\x1b\[[0-9;]*m//g')"
        if [[ "${arr[0]}" == "#" || $col -eq 0 ]]; then
            printf " ${GREEN}%-${widths[$col]}s${RESET}${BLUE} │${RESET}" "$field"
        else
            if [[ $col -eq 1 ]]; then
                printf " \033[3m${PURPLE}%-${widths[$col]}s${RESET}${BLUE} │${RESET}" "$field"
            else
                printf " ${WHITE}%-${widths[$col]}s${RESET}${BLUE} │${RESET}" "$field"
            fi
        fi
    done
    echo
}

# --------------------------------------------------------------------------------------------
# Flags --------------------------------------------------------------------------------------

only_external=0
while getopts "e" opt; do
    case $opt in
    e) only_external=1 ;;
    esac
done
shift $((OPTIND - 1))

# Grab disk data -----------------------------------------------------------------------------

LC_ALL=C disks=$(diskutil list)

if [[ -z "$disks" ]]; then
    echo -e "${RED} ⚠️ diskutil list didn't return anything!${RESET}"
    exit 1
fi

rows=()
i=1

while IFS= read -r line; do
    [[ ! "$line" =~ ^/dev/disk ]] && continue

    ident=$(echo "$line" | awk '{print $1}')
    # Check external flag using plist if possible
    external_flag=""
    if plist_data=$(diskutil info -plist "$ident" 2>/dev/null); then
        external_flag=$(echo "$plist_data" | plutil -extract "External" xml1 -o - - 2>/dev/null | grep -q "<true/>" && echo "true" || echo "false")
    fi
    if [[ $only_external -eq 1 && "$external_flag" != "true" ]]; then
        continue
    fi

    type=$(echo "$line" | awk -F '[()]' '{print $2}')

    size="-"
    if plist_data=$(diskutil info -plist "$ident" 2>/dev/null); then
        size_bytes=$(echo "$plist_data" | plutil -extract "TotalSize" raw -o - - 2>/dev/null || echo "")
        if [[ -n "$size_bytes" && "$size_bytes" =~ ^[0-9]+$ ]]; then
            size=$(diskutil info "$ident" | awk -F': *' '/Disk Size/ {print $2; exit}' | awk -F' \\(' '{print $1}')
            if [[ -z "$size" ]]; then
                if command -v numfmt >/dev/null 2>&1; then
                    size=$(numfmt --to=iec --suffix=B "$size_bytes")
                else
                    size="${size_bytes} B"
                fi
            fi
        else
            size=$(diskutil info "$ident" | awk -F': *' '/Disk Size/ {print $2; exit}' | awk -F' \\(' '{print $1}')
            [[ -z "$size" ]] && size="-"
        fi
    else
        size=$(diskutil info "$ident" | awk -F': *' '/Disk Size/ {print $2; exit}' | awk -F' \\(' '{print $1}')
        [[ -z "$size" ]] && size="-"
    fi

    mount=$(diskutil info "$ident" | awk -F': *' '/Mount Point/ {print $2; exit}')
    [[ -z "$mount" ]] && mount="-"

    rows+=("$i|$ident|$size|$type|$mount")
    ((i++))
done <<<"$disks"

# Calculate table ----------------------------------------------------------------------------

headers=("#" "Identifier" "Size" "Type" "Mount")

widths=()
for col in {0..4}; do
    max=${#headers[$col]}
    for row in "${rows[@]}"; do
        field=$(echo "$row" | cut -d'|' -f$((col + 1)))
        ((${#field} > max)) && max=${#field}
    done
    widths[$col]=$max
done

# Print table --------------------------------------------------------------------------------

print_line "╭" "┬" "╮"
printf "${BOLD}"
print_row headers
printf "${RESET}"
print_line "├" "┼" "┤"
for row in "${rows[@]}"; do
    IFS="|" read -r f1 f2 f3 f4 f5 <<<"$row"
    fields=("$f1" "$f2" "$f3" "$f4" "$f5")
    print_row fields
done
print_line "╰" "┴" "╯"

exit 0
